Shader "Custom/ColorObj" {
	Properties {
		_Color ("Color", Color) = (1,1,1,1)
		_Shadow ("Shadow", Color) = (1,1,1,1)
		_MainTex ("Albedo (RGB)", 2D) = "white" {}
		_MainTex_Shadow ("Shadow Texture", 2D) = "white" {}		
		_NormalMap ("Normal Map", 2D) = "bump" {}
		_Glossiness ("Smoothness", Range(0,1)) = 0.5
		_Metallic ("Metallic", Range(0,1)) = 0.0
		
		_Radius ("Radius", float) = 5
	}
	SubShader {
		Tags { "RenderType"="Opaque" }
		LOD 200
		
		CGPROGRAM
		#pragma surface surf Standard fullforwardshadows
		#pragma target 3.0

		sampler2D _MainTex;
		sampler2D _MainTex_Shadow;
		sampler2D _NormalMap;
		float _Radius;

		struct Input {
			float2 uv_MainTex;
			float2 uv_NormalMap;			
			float3 worldPos;
		};

		half _Glossiness;
		half _Metallic;
		fixed4 _Color;
		fixed4 _Shadow;
		float3 _Targets[10];
		float _Size;
		
		UNITY_INSTANCING_CBUFFER_START(Props)
		UNITY_INSTANCING_CBUFFER_END
		
		fixed4 calDist(float2 worldPos, float3 center, float dist, float4 mytexture, fixed4 shadow ,fixed4 color)
		{
		
			if (distance(worldPos
			,float2(center.x, center.z)) < dist)
			{	
				float aux = 0.1f;
			
				fixed4 dif = distance(color, shadow);					
				
				if(dif.x > aux & dif.y > aux & dif.z > aux)			
				{				
					return shadow;				
				}
				else
				{				
					return fixed4(0,0,0,0);				
				}
				
				
			}
			else
			{
			
				return mytexture;
			
			}
		
			
		}
		
		void surf (Input IN, inout SurfaceOutputStandard o) {
			
			fixed4 color;
						
			float2 posi = float2(IN.worldPos.x, IN.worldPos.z);
			fixed4 mytexture = tex2D (_MainTex, IN.uv_MainTex) ;
			fixed4 shadow =  _Shadow;
			
			color = mytexture;
			
			for (int i = 0; i < _Size; i++)
			{					
				color += calDist(posi,_Targets[i], _Radius, mytexture, shadow, color);
				color = min(color, shadow);
			}

			float aux = 0;
			
			
			
			//color.b = color.r = color.g = _Size / 5;
			
			o.Normal = UnpackNormal (tex2D (_NormalMap, IN.uv_NormalMap));
			o.Albedo = color.rgb; 
			o.Metallic = _Metallic;
			o.Smoothness = _Glossiness;
			o.Alpha = color.a;
		}
		ENDCG
	}
	FallBack "Diffuse"
}
